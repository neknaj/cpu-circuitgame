using nor:2->1;

//
// 回路を定義する
//


// 定数

module TRUE() -> (true) {
    true: not <- false;
    false: not <- true;
}

module FALSE() -> (false) {
    true: not <- false;
    false: not <- true;
}

func true(any) -> (true) {
    a: not <- any;
    true: or <- any a;
}

func false(any) -> (false) {
    a: not <- any;
    false: nor <- any a;
}

// 基本的なゲート

func buf(x) -> (b) {
    a = not x;
    b = not a;
}

func not(x) -> (a) {
    a = nor x x;
}

func and(x y) -> (c) {
    a = not x  ;
    b = not y  ;
    c = nor a b;
}

func or(x y) -> (b) {
    a = nor x y;
    b = not a  ;
}

func nand(x y) -> (c) {
    a = not x  ;
    b = not y  ;
    c = or a b;
}

func xor(x y) -> (e) {
    c = and x y;
    d = nor x y;
    e = nor c d;
}
func xnor(x y) -> (b) {
    a = xor x y;
    b = not a  ;
}

// 多数決

func 3or(x y z) -> (b) {
    a = or x y;
    b = or a z;
}

func 3and(x y z) -> (b) {
    a = and x y;
    b = and a z;
}

func 4match(a b c d) -> (bool) {
    a1 = and a b;
    c1 = and c d;
    a2 = or a b;
    c2 = or c d;
    ac2 = and a2 c2;
    bool = 3or a1 c1 ac2;
}

func 4even(a b c d) -> (bool) {
    x = xnor a b;
    y = xnor c d;
    bool = xnor x y;
}
func 4odd(a b c d) -> (bool) {
    x = xor a b;
    y = xor c d;
    bool = xor x y;
}

// circular dependency

module circular(x) -> (z) {
    z = nand z x;
}
module circular2() -> (x) {
    a = not x;
    x = not b;
    b = not a;
}

// count

func 4or(a b c d) -> (bool) {
    x = or a b;
    y = or c d;
    bool = or x y;
}
func 4and(a b c d) -> (bool) {
    x = and a b;
    y = and c d;
    bool = and x y;
}
func 4count(a b c d) -> (x1 y2 z4) {
    a2 a1  = hAddr a b;
    c2 c1  = hAddr c d;
    q x1  = hAddr a1 c1;
    z4 r  = hAddr a2 c2;
    y2 = or q r;
}

// 加算器

func hAddr(x y) -> (c s) {
    c = and x y;
    t = nor x y;
    s = nor c t;
}

func fAddr(x y z) -> (c s1) {
    c0 s0 = hAddr x y  ;
    c1 s1 = hAddr s0 z ;
    c     = or    c0 c1;
}
func fAddr2(x y) -> (or xnor) {
    ab = nor x y;
    xa = nor x ab;
    ya = nor y ab;
    xnor = nor xa ya;
    or = not ab;
}
// ラッチ回路

module sr_latch(s r) -> (q nq) {
    nq = nor s q;
    q = nor r nq;
}

module d_latch(d clk) -> (q nq) {
    nd = not d;
    s = nor nd clk;
    r = nor d clk;
    q nq = sr_latch s r;
}

// クロック回路

module clock() -> (a) {
    a = buf b;
    b = not a;
}

// インパルス

module impulse() -> (c) {
    c = not a;
    a = not b;
    b = not a;
}

// 8bit 回路
func 8nor(a0 a1 a2 a3 a4 a5 a6 a7 b0 b1 b2 b3 b4 b5 b6 b7) -> (o0 o1 o2 o3 o4 o5 o6 o7) {
    o0 = nor a0 b0;
    o1 = nor a1 b1;
    o2 = nor a2 b2;
    o3 = nor a3 b3;
    o4 = nor a4 b4;
    o5 = nor a5 b5;
    o6 = nor a6 b6;
    o7 = nor a7 b7;
}
func 8buf(0 1 2 3 4 5 6 7) -> (o0 o1 o2 o3 o4 o5 o6 o7) {
    o0 = buf 0;
    o1 = buf 1;
    o2 = buf 2;
    o3 = buf 3;
    o4 = buf 4;
    o5 = buf 5;
    o6 = buf 6;
    o7 = buf 7;
}
func 8not(0 1 2 3 4 5 6 7) -> (o0 o1 o2 o3 o4 o5 o6 o7) {
    o0 = not 0;
    o1 = not 1;
    o2 = not 2;
    o3 = not 3;
    o4 = not 4;
    o5 = not 5;
    o6 = not 6;
    o7 = not 7;
}
func 8or(a0 a1 a2 a3 a4 a5 a6 a7
            b0 b1 b2 b3 b4 b5 b6 b7) ->
            (o0 o1 o2 o3 o4 o5 o6 o7) {
    o0 = or a0 b0;
    o1 = or a1 b1;
    o2 = or a2 b2;
    o3 = or a3 b3;
    o4 = or a4 b4;
    o5 = or a5 b5;
    o6 = or a6 b6;
    o7 = or a7 b7;
}
func 8and(a0 a1 a2 a3 a4 a5 a6 a7
            b0 b1 b2 b3 b4 b5 b6 b7) ->
            (o0 o1 o2 o3 o4 o5 o6 o7) {
    o0 = and a0 b0;
    o1 = and a1 b1;
    o2 = and a2 b2;
    o3 = and a3 b3;
    o4 = and a4 b4;
    o5 = and a5 b5;
    o6 = and a6 b6;
    o7 = and a7 b7;
}
func 8xor(a0 a1 a2 a3 a4 a5 a6 a7
            b0 b1 b2 b3 b4 b5 b6 b7) ->
            (o0 o1 o2 o3 o4 o5 o6 o7) {
    o0 = xor a0 b0;
    o1 = xor a1 b1;
    o2 = xor a2 b2;
    o3 = xor a3 b3;
    o4 = xor a4 b4;
    o5 = xor a5 b5;
    o6 = xor a6 b6;
    o7 = xor a7 b7;
}
func 8shiftr(0 1 2 3 4 5 6 7) -> (o0 o1 o2 o3 o4 o5 o6 o7) {
    o0 = false 0;
    o1 o2 o3 o4 o5 o6 o7 f = 8buf 0 1 2 3 4 5 6 o0;
}

func 8addr(a0 a1 a2 a3 a4 a5 a6 a7
            b0 b1 b2 b3 b4 b5 b6 b7) ->
            (o0 o1 o2 o3 o4 o5 o6 o7) {
    c0 o0 = hAddr a0 b0;
    c1 o1 = fAddr c0 a1 b1;
    c2 o2 = fAddr c1 a2 b2;
    c3 o3 = fAddr c2 a3 b3;
    c4 o4 = fAddr c3 a4 b4;
    c5 o5 = fAddr c4 a5 b5;
    c6 o6 = fAddr c5 a6 b6;
    c7 o7 = fAddr c6 a7 b7;
}

func 8sub(a0 a1 a2 a3 a4 a5 a6 a7 b0 b1 b2 b3 b4 b5 b6 b7) -> (o0 o1 o2 o3 o4 o5 o6 o7) {
    nb0 nb1 nb2 nb3 nb4 nb5 nb6 nb7 = 8nagate b0 b1 b2 b3 b4 b5 b6 b7;
    o0 o1 o2 o3 o4 o5 o6 o7 = 8addr a0 a1 a2 a3 a4 a5 a6 a7 nb0 nb1 nb2 nb3 nb4 nb5 nb6 nb7;
}
func 8nagate(0 1 2 3 4 5 6 7) -> (o0 o1 o2 o3 o4 o5 o6 o7) {
    n0 n1 n2 n3 n4 n5 n6 n7 = 8not 0 1 2 3 4 5 6 7;
    o0 o1 o2 o3 o4 o5 o6 o7 = 8inc n0 n1 n2 n3 n4 n5 n6 n7;
}

// 2進数 to bit
func 1decoder(s) -> (a b) {
    a = not  s;
    b = buf  s;
}
func 2decoder(s0 s1) -> (a b c d) {
    ns0 = not s0;
    ns1 = not s1;
    a = nor s0 s1;
    b = nor ns0 s1;
    c = nor s0 ns1;
    d = nor ns0 ns1;
}
func 3decoder(a1 a2 a3) -> (o0 o1 o2 o3 o4 o5 o6 o7) {
    n1 = not a1;
    n2 = not a2;
    n3 = not a3;

    nor_n1n2 = nor n1 n2;
    nor_n12 = nor n1 a2;
    nor_1n2 = nor a1 n2;
    nor_12 = nor a1 a2;
    not_n1n2 = not nor_n1n2;
    not_n1a2 = not nor_n12;
    not_a1n2 = not nor_1n2;
    not_a1a2 = not nor_12;

    o0 = nor not_a1a2 a3;
    o1 = nor not_n1a2 a3;
    o2 = nor not_a1n2 a3;
    o3 = nor not_n1n2 a3;
    o4 = nor not_a1a2 n3;
    o5 = nor not_n1a2 n3;
    o6 = nor not_a1n2 n3;
    o7 = nor not_n1n2 n3;
}
// 8bitを流すかどうか
func 8switch(0 1 2 3 4 5 6 7 swc) -> (o0 o1 o2 o3 o4 o5 o6 o7) {
    o0 o1 o2 o3 o4 o5 o6 o7 = 8and 0 1 2 3 4 5 6 7 swc swc swc swc swc swc swc swc;
}
// #5
// ALU
func 6or(a0 a1 a2 a3 a4 a5) -> (o) {
    p = 3or a0 a1 a2;
    q = 3or a3 a4 a5;
    o = or p q;
}
func ALU(a0 a1 a2
            b0 b1 b2 b3 b4 b5 b6 b7
            c0 c1 c2 c3 c4 c5 c6 c7) ->
            (o0 o1 o2 o3 o4 o5 o6 o7) {
    // Or Nand Nor And Add Sub
    t0 t1 t2 t3 t4 t5 f0 f1 = 3decoder a0 a1 a2;
    or0 or1 or2 or3 or4 or5 or6 or7 = 8or b0 b1 b2 b3 b4 b5 b6 b7 c0 c1 c2 c3 c4 c5 c6 c7;
    nb0 nb1 nb2 nb3 nb4 nb5 nb6 nb7 = 8not b0 b1 b2 b3 b4 b5 b6 b7;
    nc0 nc1 nc2 nc3 nc4 nc5 nc6 nc7 = 8not c0 c1 c2 c3 c4 c5 c6 c7;
    nand0 nand1 nand2 nand3 nand4 nand5 nand6 nand7 = 8or nb0 nb1 nb2 nb3 nb4 nb5 nb6 nb7 nc0 nc1 nc2 nc3 nc4 nc5 nc6 nc7;
    nor0 nor1 nor2 nor3 nor4 nor5 nor6 nor7 = 8nor b0 b1 b2 b3 b4 b5 b6 b7 c0 c1 c2 c3 c4 c5 c6 c7;
    and0 and1 and2 and3 and4 and5 and6 and7 = 8not nand0 nand1 nand2 nand3 nand4 nand5 nand6 nand7;
    // add sub
    d0 d1 d2 d3 d4 d5 d6 d7 = 8nagate c0 c1 c2 c3 c4 c5 c6 c7;
    e0 e1 e2 e3 e4 e5 e6 e7 = selector c0 c1 c2 c3 c4 c5 c6 c7 d0 d1 d2 d3 d4 d5 d6 d7 t4;
    add0 add1 add2 add3 add4 add5 add6 add7 = 8addr b0 b1 b2 b3 b4 b5 b6 b7 e0 e1 e2 e3 e4 e5 e6 e7;

    o00 o01 o02 o03 o04 o05 o06 o07 = 8switch or0 or1 or2 or3 or4 or5 or6 or7 t0;
    o10 o11 o12 o13 o14 o15 o16 o17 = 8switch nand0 nand1 nand2 nand3 nand4 nand5 nand6 nand7 t1;
    o20 o21 o22 o23 o24 o25 o26 o27 = 8switch nor0 nor1 nor2 nor3 nor4 nor5 nor6 nor7 t2;
    o30 o31 o32 o33 o34 o35 o36 o37 = 8switch and0 and1 and2 and3 and4 and5 and6 and7 t3;
    o40 o41 o42 o43 o44 o45 o46 o47 = 8switch add0 add1 add2 add3 add4 add5 add6 add7 t4;
    o50 o51 o52 o53 o54 o55 o56 o57 = 8switch add0 add1 add2 add3 add4 add5 add6 add7 t5;

    o0 = 6or o00 o10 o20 o30 o40 o50;
    o1 = 6or o01 o11 o21 o31 o41 o51;
    o2 = 6or o02 o12 o22 o32 o42 o52;
    o3 = 6or o03 o13 o23 o33 o43 o53;
    o4 = 6or o04 o14 o24 o34 o44 o54;
    o5 = 6or o05 o15 o25 o35 o45 o55;
    o6 = 6or o06 o16 o26 o36 o46 o56;
    o7 = 6or o07 o17 o27 o37 o47 o57;
}

// #4
// if switch A else B
func selector(a0 a1 a2 a3 a4 a5 a6 a7
                b0 b1 b2 b3 b4 b5 b6 b7
                switch) ->
                (0 1 2 3 4 5 6 7) {
    nswitch = not switch;
    00 01 02 03 04 05 06 07 = 8switch a0 a1 a2 a3 a4 a5 a6 a7 switch;
    10 11 12 13 14 15 16 17 = 8switch b0 b1 b2 b3 b4 b5 b6 b7 nswitch;
    0 1 2 3 4 5 6 7 = 8or 00 01 02 03 04 05 06 07 10 11 12 13 14 15 16 17;
}
// 入力と出力を選ぶ
func copyvalue(a0 a1 a2 a3 a4 a5 a6 a7
                b0 b1 b2 b3 b4 b5 b6 b7
                inswitch outswitch) ->
                (00 01 02 03 04 05 06 07
                10 11 12 13 14 15 16 17) {
    // 入力選択
    i0 i1 i2 i3 i4 i5 i6 i7 = selector a0 a1 a2 a3 a4 a5 a6 a7 b0 b1 b2 b3 b4 b5 b6 b7 inswitch;

    // 出力選択
    noutswitch = not outswitch;
    00 01 02 03 04 05 06 07 = 8switch i0 i1 i2 i3 i4 i5 i6 i7 noutswitch;
    10 11 12 13 14 15 16 17 = 8switch i0 i1 i2 i3 i4 i5 i6 i7 outswitch;

}

// メモリ
// wの間書き込み、rの間読み出し
module mem1bit(d, w,r) -> (o) {
    nw = not w;
    q nq = d_latch d nw;
    o = and q r;
}
module mem8bits(d0 d1 d2 d3 d4 d5 d6 d7 w r) -> (o0 o1 o2 o3 o4 o5 o6 o7) {
    // nw = not w;
    o0 = mem1bit d0 w r;
    o1 = mem1bit d1 w r;
    o2 = mem1bit d2 w r;
    o3 = mem1bit d3 w r;
    o4 = mem1bit d4 w r;
    o5 = mem1bit d5 w r;
    o6 = mem1bit d6 w r;
    o7 = mem1bit d7 w r;
}

module mem4byte(d0 d1 d2 d3 d4 d5 d6 d7
                d8 d9 da db dc dd de df
                d10 d11 d12 d13 d14 d15 d16 d17
                d18 d19 d1a d1b d1c d1d d1e d1f
                w r) ->
                (o0 o1 o2 o3 o4 o5 o6 o7
                o8 o9 oa ob oc od oe of
                o10 o11 o12 o13 o14 o15 o16 o17
                o18 o19 o1a o1b o1c o1d o1e o1f) {
    o0 o1 o2 o3 o4 o5 o6 o7 = mem8bits d0 d1 d2 d3 d4 d5 d6 d7 w r;
    o8 o9 oa ob oc od oe of = mem8bits d8 d9 da db dc dd de df w r;
    o10 o11 o12 o13 o14 o15 o16 o17 = mem8bits d10 d11 d12 d13 d14 d15 d16 d17 w r;
    o18 o19 o1a o1b o1c o1d o1e o1f = mem8bits d18 d19 d1a d1b d1c d1d d1e d1f w r;
}
// sw0,1が保存メモリ先指定
// w_rがオンなら write, オフなら read
module mem8bit2(a0 a1 a2 a3 a4 a5 a6 a7 sw0 sw1 w_r) -> (
o0 o1 o2 o3 o4 o5 o6 o7 ) {
// o_a0 o_a1 o_a2 o_a3 o_a4 o_a5 o_a6 o_a7
// o_b0 o_b1 o_b2 o_b3 o_b4 o_b5 o_b6 o_b7
// o_c0 o_c1 o_c2 o_c3 o_c4 o_c5 o_c6 o_c7
// o_d0 o_d1 o_d2 o_d3 o_d4 o_d5 o_d6 o_d7
    sm0 sm1 sm2 sm3 = 2decoder sw0 sw1;   //memory selector
    w_sm0 = and w_r sm0;
    w_sm1 = and w_r sm1;
    w_sm2 = and w_r sm2;
    w_sm3 = and w_r sm3;

    nw_r = not w_r;
    r_sm0 = and nw_r sm0;
    r_sm1 = and nw_r sm1;
    r_sm2 = and nw_r sm2;
    r_sm3 = and nw_r sm3;
    o_a0 o_a1 o_a2 o_a3 o_a4 o_a5 o_a6 o_a7 = mem8bits a0 a1 a2 a3 a4 a5 a6 a7 w_sm0 r_sm0;  // memory 0
    o_b0 o_b1 o_b2 o_b3 o_b4 o_b5 o_b6 o_b7 = mem8bits a0 a1 a2 a3 a4 a5 a6 a7 w_sm1 r_sm1;  // memory 1
    o_c0 o_c1 o_c2 o_c3 o_c4 o_c5 o_c6 o_c7 = mem8bits a0 a1 a2 a3 a4 a5 a6 a7 w_sm2 r_sm2;  // memory 2
    o_d0 o_d1 o_d2 o_d3 o_d4 o_d5 o_d6 o_d7 = mem8bits a0 a1 a2 a3 a4 a5 a6 a7 w_sm3 r_sm3;  // memory 3
    o0 = 4or o_a0 o_b0 o_c0 o_d0;
    o1 = 4or o_a1 o_b1 o_c1 o_d1;
    o2 = 4or o_a2 o_b2 o_c2 o_d2;
    o3 = 4or o_a3 o_b3 o_c3 o_d3;
    o4 = 4or o_a4 o_b4 o_c4 o_d4;
    o5 = 4or o_a5 o_b5 o_c5 o_d5;
    o6 = 4or o_a6 o_b6 o_c6 o_d6;
    o7 = 4or o_a7 o_b7 o_c7 o_d7;
}

module mem12byte(d0 d1 d2 d3 d4 d5 d6 d7
                    d8 d9 da db dc dd de df
                    d10 d11 d12 d13 d14 d15 d16 d17
                    d18 d19 d1a d1b d1c d1d d1e d1f
                    d20 d21 d22 d23 d24 d25 d26 d27
                    d28 d29 d2a d2b d2c d2d d2e d2f
                    d30 d31 d32 d33 d34 d35 d36 d37
                    d38 d39 d3a d3b d3c d3d d3e d3f
                    d40 d41 d42 d43 d44 d45 d46 d47
                    d48 d49 d4a d4b d4c d4d d4e d4f
                    d50 d51 d52 d53 d54 d55 d56 d57
                    d58 d59 d5a d5b d5c d5d d5e d5f
                    w r) ->
                (o0 o1 o2 o3 o4 o5 o6 o7
                    o8 o9 oa ob oc od oe of
                    o10 o11 o12 o13 o14 o15 o16 o17
                    o18 o19 o1a o1b o1c o1d o1e o1f
                    o20 o21 o22 o23 o24 o25 o26 o27
                    o28 o29 o2a o2b o2c o2d o2e o2f
                    o30 o31 o32 o33 o34 o35 o36 o37
                    o38 o39 o3a o3b o3c o3d o3e o3f
                    o40 o41 o42 o43 o44 o45 o46 o47
                    o48 o49 o4a o4b o4c o4d o4e o4f
                    o50 o51 o52 o53 o54 o55 o56 o57
                    o58 o59 o5a o5b o5c o5d o5e o5f) {
    o0 o1 o2 o3 o4 o5 o6 o7
    o8 o9 oa ob oc od oe of
    o10 o11 o12 o13 o14 o15 o16 o17
    o18 o19 o1a o1b o1c o1d o1e o1f = mem4byte d0 d1 d2 d3 d4 d5 d6 d7
                                                d8 d9 da db dc dd de df
                                                d10 d11 d12 d13 d14 d15 d16 d17
                                                d18 d19 d1a d1b d1c d1d d1e d1f w r;
    o20 o21 o22 o23 o24 o25 o26 o27
    o28 o29 o2a o2b o2c o2d o2e o2f
    o30 o31 o32 o33 o34 o35 o36 o37
    o38 o39 o3a o3b o3c o3d o3e o3f = mem4byte d20 d21 d22 d23 d24 d25 d26 d27
                                                d28 d29 d2a d2b d2c d2d d2e d2f
                                                d30 d31 d32 d33 d34 d35 d36 d37
                                                d38 d39 d3a d3b d3c d3d d3e d3f w r;
    o40 o41 o42 o43 o44 o45 o46 o47
    o48 o49 o4a o4b o4c o4d o4e o4f
    o50 o51 o52 o53 o54 o55 o56 o57
    o58 o59 o5a o5b o5c o5d o5e o5f = mem4byte d40 d41 d42 d43 d44 d45 d46 d47
                                                d48 d49 d4a d4b d4c d4d d4e d4f
                                                d50 d51 d52 d53 d54 d55 d56 d57
                                                d58 d59 d5a d5b d5c d5d d5e d5f w r;
}

func 8inc(d0 d1 d2 d3 d4 d5 d6 d7) -> (o0 o1 o2 o3 o4 o5 o6 o7) {
    c = true d0;
    c0 o0 = hAddr d0 c;
    c1 o1 = hAddr d1 c0;
    c2 o2 = hAddr d2 c1;
    c3 o3 = hAddr d3 c2;
    c4 o4 = hAddr d4 c3;
    c5 o5 = hAddr d5 c4;
    c6 o6 = hAddr d6 c5;
    c7 o7 = hAddr d7 c6;
}
func 8dec (d0 d1 d2 d3 d4 d5 d6 d7)->(o0 o1 o2 o3 o4 o5 o6 o7) {
    o0: not d0;
    c1 o1: fAddr_4decrement d1 d0;
    c2 o2: fAddr_4decrement d2 c1;
    c3 o3: fAddr_4decrement d3 c2;
    c4 o4: fAddr_4decrement d4 c3;
    c5 o5: fAddr_4decrement d5 c4;
    c6 o6: fAddr_4decrement d6 c5;
    c7 o7: fAddr_4decrement d7 c6;
}
func fAddr_4decrement (x y)->(v0 s) {
    a: nor x y;
    v0: not a  ;
    a0: not x  ;
    b0: not y  ;
    v1: nor a0 b0;
    v3: nor v1 a;
    s: not v3;
}
module counter() -> (o0 o1 o2 o3 o4 o5 o6 o7) {
    1 = true o0;
    0 = false o0;
    a0 a1 a2 a3 a4 a5 a6 a7 = 8inc o0 o1 o2 o3 o4 o5 o6 o7;
    o0 o1 o2 o3 o4 o5 o6 o7 = mem8bits a0 a1 a2 a3 a4 a5 a6 a7 1 1;
}

module counter_swc(i0 i1 i2 i3 i4 i5 i6 i7 swc) -> (o0 o1 o2 o3 o4 o5 o6 o7) {
    1 = true i0;
    0 = false i0;
    a0 a1 a2 a3 a4 a5 a6 a7 = 8inc o0 o1 o2 o3 o4 o5 o6 o7;
    p0 p1 p2 p3 p4 p5 p6 p7 = selector i0 i1 i2 i3 i4 i5 i6 i7 a0 a1 a2 a3 a4 a5 a6 a7 swc; 
    o0 o1 o2 o3 o4 o5 o6 o7 = mem8bits p0 p1 p2 p3 p4 p5 p6 p7 1 1;
}

// #5
// レジスタ
// a@0:2 REG@0~5, INPUT, UNUSED
// b@0:2 REG@0~5, OUTPUT, UNUSED
// 人間が操作できるものではない(ボタンのオンオフを一括で操作しないとfill(0)が多発する)
func 7or(0 1 2 3 4 5 6) -> (b) {
    05 = 6or 0 1 2 3 4 5;
    b = or 05 6;
}
module register_view(a0 a1 a2
                b0 b1 b2
                i0 i1 i2 i3 i4 i5 i6 i7 test) ->
                (in0 in1 in2 in3 in4 in5 in6 in7
                ins0 ins1 ins2 ins3 ins4 ins5 ins6 ins7
                sir0 sir1 sir2 sir3 sir4 sir5 sin _0
                sor0 sor1 sor2 sor3 sor4 sor5 sout _1
                r00 r01 r02 r03 r04 r05 r06 r07
                r10 r11 r12 r13 r14 r15 r16 r17
                r20 r21 r22 r23 r24 r25 r26 r27
                r30 r31 r32 r33 r34 r35 r36 r37
                r40 r41 r42 r43 r44 r45 r46 r47
                r50 r51 r52 r53 r54 r55 r56 r57
                o0 o1 o2 o3 o4 o5 o6 o7
                sor0 sor1 sor2 sor3 sor4 sor5) {
    // decode input
    sir0 sir1 sir2 sir3 sir4 sir5 sin _0 = 3decoder a0 a1 a2;
    sor0 sor1 sor2 sor3 sor4 sor5 sout _1 = 3decoder b0 b1 b2;
    // filter value
    ins0 ins1 ins2 ins3 ins4 ins5 ins6 ins7 = 8switch i0 i1 i2 i3 i4 i5 i6 i7 sin;  // input valueをswitch inuptでフィルター
    _ = false _0;
    sior0 sior1 sior2 sior3 sior4 sior5 sior6 sior7 = 8or test test test test test test _ _ sir0 sir1 sir2 sir3 sir4 sir5 _ _;
    r00 r01 r02 r03 r04 r05 r06 r07 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 sor0 sior0;
    r10 r11 r12 r13 r14 r15 r16 r17 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 sor1 sior1;
    r20 r21 r22 r23 r24 r25 r26 r27 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 sor2 sior2;
    r30 r31 r32 r33 r34 r35 r36 r37 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 sor3 sior3;
    r40 r41 r42 r43 r44 r45 r46 r47 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 sor4 sior4;
    r50 r51 r52 r53 r54 r55 r56 r57 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 sor5 sior5;
    // value code
    in0 = 7or r00 r10 r20 r30 r40 r50 ins0;
    in1 = 7or r01 r11 r21 r31 r41 r51 ins1;
    in2 = 7or r02 r12 r22 r32 r42 r52 ins2;
    in3 = 7or r03 r13 r23 r33 r43 r53 ins3;
    in4 = 7or r04 r14 r24 r34 r44 r54 ins4;
    in5 = 7or r05 r15 r25 r35 r45 r55 ins5;
    in6 = 7or r06 r16 r26 r36 r46 r56 ins6;
    in7 = 7or r07 r17 r27 r37 r47 r57 ins7;

    o0 o1 o2 o3 o4 o5 o6 o7 = 8switch in0 in1 in2 in3 in4 in5 in6 in7 sout;
}
module register(a0 a1 a2
                b0 b1 b2
                i0 i1 i2 i3 i4 i5 i6 i7) ->
                (o0 o1 o2 o3 o4 o5 o6 o7) {
    // decode input
    sir0 sir1 sir2 sir3 sir4 sir5 sin _0 = 3decoder a0 a1 a2;
    sor0 sor1 sor2 sor3 sor4 sor5 sout _1 = 3decoder b0 b1 b2;
    // filter value
    ins0 ins1 ins2 ins3 ins4 ins5 ins6 ins7 = 8switch i0 i1 i2 i3 i4 i5 i6 i7 sin;  // input valueをswitch inuptでフィルター
    // メモリに書き込み
    r00 r01 r02 r03 r04 r05 r06 r07 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 sor0 sir0;
    r10 r11 r12 r13 r14 r15 r16 r17 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 sor1 sir1;
    r20 r21 r22 r23 r24 r25 r26 r27 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 sor2 sir2;
    r30 r31 r32 r33 r34 r35 r36 r37 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 sor3 sir3;
    r40 r41 r42 r43 r44 r45 r46 r47 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 sor4 sir4;
    r50 r51 r52 r53 r54 r55 r56 r57 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 sor5 sir5;
    // value code
    in0 = 7or r00 r10 r20 r30 r40 r50 ins0;
    in1 = 7or r01 r11 r21 r31 r41 r51 ins1;
    in2 = 7or r02 r12 r22 r32 r42 r52 ins2;
    in3 = 7or r03 r13 r23 r33 r43 r53 ins3;
    in4 = 7or r04 r14 r24 r34 r44 r54 ins4;
    in5 = 7or r05 r15 r25 r35 r45 r55 ins5;
    in6 = 7or r06 r16 r26 r36 r46 r56 ins6;
    in7 = 7or r07 r17 r27 r37 r47 r57 ins7;

    o0 o1 o2 o3 o4 o5 o6 o7 = 8switch in0 in1 in2 in3 in4 in5 in6 in7 sout;
}
// #6

// instruct decoder
func instdecoder(a0 a1 a2 a3 a4 a5 a6 a7) -> (o0 o1 o2 o3) {
    o0 o1 o2 o3 = 2decoder a6 a7;
}

// merge ALU and register machine
// a0 a1で命令の選択
    // 00: immediate    -> REG0に保存
    // 01: calculate    -> REG1,2から読みだしたREG2に保存
    // 10: copy
    // (11: condition)
// a5 a6 a7で命令の選択 (calucuateモードのみ)
    // Or Nand Nor And Add Sub
    // input:   REG0, REG1
    // output:  REG2
module calculator(a0 a1 a2 a3 a4 a5 a6 a7
                i0 i1 i2 i3 i4 i5 i6 i7) ->(
                sr00 sr01 sr02 sr03 sr04 sr05 sr06 sr07
                sr10 sr11 sr12 sr13 sr14 sr15 sr16 sr17
                sr20 sr21 sr22 sr23 sr24 sr25 sr26 sr27
                sr30 sr31 sr32 sr33 sr34 sr35 sr36 sr37
                sr40 sr41 sr42 sr43 sr44 sr45 sr46 sr47
                sr50 sr51 sr52 sr53 sr54 sr55 sr56 sr57
                r00 r01 r02 r03 r04 r05 r06 r07
                r10 r11 r12 r13 r14 r15 r16 r17
                r20 r21 r22 r23 r24 r25 r26 r27
                r30 r31 r32 r33 r34 r35 r36 r37
                r40 r41 r42 r43 r44 r45 r46 r47
                r50 r51 r52 r53 r54 r55 r56 r57
                o0 o1 o2 o3 o4 o5 o6 o7) {
    // 定数
    0 = false <- a0;
    1 = true <- a0;
    // decode input
    t0 t1 t2 t3 = 2decoder a0 a1;   // どの命令か
    sir0 sir1 sir2 sir3 sir4 sir5 sin _0 = 3decoder a2 a3 a4;   // 入力REGの選択 or 演算の選択
    sor0 sor1 sor2 sor3 sor4 sor5 sout _1 = 3decoder a5 a6 a7;  // 出力REGの選択 or 演算の選択
    // filter input
    ins0 ins1 ins2 ins3 ins4 ins5 ins6 ins7 = 8switch i0 i1 i2 i3 i4 i5 i6 i7 sin_t2;  // input valueをswitch inuptでフィルター
    // REGが書き込まれるのは
    // REG0 => t0,t2
    // REG3 => t1,t2
    // REG1245 => t2
    t0t2 = or t0 t2;
    t1t2 = or t1 t2;
    sor0t2 = and sor0 t2;
    sor3t2 = and sor3 t2;

    socr0 = or t0 sor0t2;  // t0 or (t2 and sor0)
    socr1 = and sor1 t2;
    socr2 = and sor2 t2;
    socr3 = or t1 sor3t2;    // t1 or (t2 and sor3)
    socr4 = and sor4 t2;
    socr5 = and sor5 t2;
    // REGが読み出されるのは
    // REG12 => t1, t2
    // REG0345 => t2
    sir1t2 = and sir1 t2;
    sir2t2 = and sir2 t2;
    sicr0 = and sir0 t2;
    sicr1 = or t1 sir1t2;   // t1 or (t2 and sir1)
    sicr2 = or t1 sir2t2;   // t1 or (t2 and sir2)
    sicr3 = and sir3 t2;
    sicr4 = and sir4 t2;
    sicr5 = and sir5 t2;

    // 全てのメモリの読み出し/書き込みコード
    // r00 r01 r02 r03 r04 r05 r06 r07 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 socr0 sicr0;
    // r10 r11 r12 r13 r14 r15 r16 r17 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 socr1 sicr1;
    // r20 r21 r22 r23 r24 r25 r26 r27 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 socr2 sicr2;
    // r30 r31 r32 r33 r34 r35 r36 r37 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 socr3 sicr3;
    // r40 r41 r42 r43 r44 r45 r46 r47 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 socr4 sicr4;
    // r50 r51 r52 r53 r54 r55 r56 r57 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 socr5 sicr5;

    // 現在のREG内部を表示し続ける
    sr00 sr01 sr02 sr03 sr04 sr05 sr06 sr07 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 socr0 1;
    sr10 sr11 sr12 sr13 sr14 sr15 sr16 sr17 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 socr1 1;
    sr20 sr21 sr22 sr23 sr24 sr25 sr26 sr27 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 socr2 1;
    sr30 sr31 sr32 sr33 sr34 sr35 sr36 sr37 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 socr3 1;
    sr40 sr41 sr42 sr43 sr44 sr45 sr46 sr47 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 socr4 1;
    sr50 sr51 sr52 sr53 sr54 sr55 sr56 sr57 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 socr5 1;
    r00 r01 r02 r03 r04 r05 r06 r07 = 8switch sr00 sr01 sr02 sr03 sr04 sr05 sr06 sr07 sicr0;
    r10 r11 r12 r13 r14 r15 r16 r17 = 8switch sr10 sr11 sr12 sr13 sr14 sr15 sr16 sr17 sicr1;
    r20 r21 r22 r23 r24 r25 r26 r27 = 8switch sr20 sr21 sr22 sr23 sr24 sr25 sr26 sr27 sicr2;
    r30 r31 r32 r33 r34 r35 r36 r37 = 8switch sr30 sr31 sr32 sr33 sr34 sr35 sr36 sr37 sicr3;
    r40 r41 r42 r43 r44 r45 r46 r47 = 8switch sr40 sr41 sr42 sr43 sr44 sr45 sr46 sr47 sicr4;
    r50 r51 r52 r53 r54 r55 r56 r57 = 8switch sr50 sr51 sr52 sr53 sr54 sr55 sr56 sr57 sicr5;

    // value code
    in0 = 9bit_or r00 r10 r20 r30 r40 r50 ins0 sre0 imm0; // REGの読み出し or INPUT or ALU結果
    in1 = 9bit_or r01 r11 r21 r31 r41 r51 ins1 sre1 imm1;
    in2 = 9bit_or r02 r12 r22 r32 r42 r52 ins2 sre2 imm2;
    in3 = 9bit_or r03 r13 r23 r33 r43 r53 ins3 sre3 imm3;
    in4 = 9bit_or r04 r14 r24 r34 r44 r54 ins4 sre4 imm4;
    in5 = 9bit_or r05 r15 r25 r35 r45 r55 ins5 sre5 imm5;
    in6 = 9bit_or r06 r16 r26 r36 r46 r56 ins6 sre6   _2;
    in7 = 9bit_or r07 r17 r27 r37 r47 r57 ins7 sre7   _3;

    // t0の場合 REG0 = a@2:7
        imm0 imm1 imm2 imm3 imm4 imm5 _2 _3 = 8switch a2 a3 a4 a5 a6 a7 0 0 t0;
    // t1の場合 REG2 = REG0 {ope} REG1;
        // calc(命令はa5 a6 a7)
        re0 re1 re2 re3 re4 re5 re6 re7 = ALU a5 a6 a7 r00 r01 r02 r03 r04 r05 r06 r07 r10 r11 r12 r13 r14 r15 r16 r17;
        // !t1の場合は流さない
        sre0 sre1 sre2 sre3 sre4 sre5 sre6 sre7 = 8switch re0 re1 re2 re3 re4 re5 re6 re7 t1;
    // t2の場合 OUTPUT(a5 a6 a7) = INPUT(a2 a3 a4)
        sin_t2 = and sin t2;    // t2の時 & INPUT => INPUTを流す
        is_to_out = and sout t2;
        o0 o1 o2 o3 o4 o5 o6 o7 = 8switch in0 in1 in2 in3 in4 in5 in6 in7 is_to_out;
}
func 8bit_or(i0 i1 i2 i3 i4 i5 i6 i7) -> (bool) {
    p = 4or i0 i1 i2 i3;
    q = 4or i4 i5 i6 i7;
    bool = or p q;
}
func 9bit_or(i0 i1 i2 i3 i4 i5 i6 i7 i8) -> (bool) {
    p = 4or i0 i1 i2 i3;
    q = 4or i4 i5 i6 i7;
    bool = 3or p q i8;
}


// check VM machine speed
func 8finc(a0 a1 a2 a3 a4 a5 a6 a7 c0) -> (o0 o1 o2 o3 o4 o5 o6 o7 c8) {
    c1 o0 = hAddr c0 a0;
    c2 o1 = hAddr c1 a1;
    c3 o2 = hAddr c2 a2;
    c4 o3 = hAddr c3 a3;
    c5 o4 = hAddr c4 a4;
    c6 o5 = hAddr c5 a5;
    c7 o6 = hAddr c6 a6;
    c8 o7 = hAddr c7 a7;
}
module 32counter() -> (o00 o01 o02 o03 o04 o05 o06 o07 o08 o09 o0a o0b o0c o0d o0e o0f o10 o11 o12 o13 o14 o15 o16 o17 o18 o19 o1a o1b o1c o1d o1e o1f) {
    1 = true o00;
    0 = false o00;
    a00 a01 a02 a03 a04 a05 a06 a07 c0 = 8finc o00 o01 o02 o03 o04 o05 o06 o07 1;
    a08 a09 a0a a0b a0c a0d a0e a0f c1 = 8finc o08 o09 o0a o0b o0c o0d o0e o0f c0;
    a10 a11 a12 a13 a14 a15 a16 a17 c2 = 8finc o10 o11 o12 o13 o14 o15 o16 o17 c1;
    a18 a19 a1a a1b a1c a1d a1e a1f c3 = 8finc o18 o19 o1a o1b o1c o1d o1e o1f c2;

    o00 o01 o02 o03 o04 o05 o06 o07 = mem8bits a00 a01 a02 a03 a04 a05 a06 a07 1 1;
    o08 o09 o0a o0b o0c o0d o0e o0f = mem8bits a08 a09 a0a a0b a0c a0d a0e a0f 1 1;
    o10 o11 o12 o13 o14 o15 o16 o17 = mem8bits a10 a11 a12 a13 a14 a15 a16 a17 1 1;
    o18 o19 o1a o1b o1c o1d o1e o1f = mem8bits a18 a19 a1a a1b a1c a1d a1e a1f 1 1;
}
func demux1(in s) -> (a b) {
    a0: not s;
    a: and in a0;
    b: and in s;
}
// 条件分岐
func condition(i0 i1 i2 i3 i4 i5 i6 i7 c0 c1 c2) -> (bool) {
    t0 t1 t2 t3 = 2decoder c0 c1;

    not0 = 8bit_or i0 i1 i2 i3 i4 i5 i6 i7;
    is0 = not not0;
    0neg = or is0 i7;
    
    a = and is0 t1;
    b = and i7 t2;
    c = and 0neg t3;
    p = 3or a b c;    //4つの条件まとめ
    
    bool = xor p c2;
}

// merge calc and memory
// a0 a1で命令の選択
    // 00: immediate
    // 01: calculate
    // 10: copy
    // 11: condition
// a5 a6 a7で命令の選択 (calucuateモードのみ)
    // Or Nand Nor And Add Sub
    // input:   REG0, REG1
    // output:  REG2
// a5 a6 a7で条件の選択 (conditionモード)
    // 0との比較 NEVER = < <= ALWAYS != >= >
module turing_complete(a0 a1 a2 a3 a4 a5 a6 a7
                i0 i1 i2 i3 i4 i5 i6 i7) ->(
                o0 o1 o2 o3 o4 o5 o6 o7
                c0 c1 c2 c3 c4 c5 c6 c7 cond) {
    // 定数
    0 = false <- a0;
    1 = true <- a0;
    // decode input
    t0 t1 t2 t3 = 2decoder a0 a1;   // どの命令か
    sir0 sir1 sir2 sir3 sir4 sir5 sin _0 = 3decoder a2 a3 a4;   // 入力REGの選択 or 演算の選択
    sor0 sor1 sor2 sor3 sor4 sor5 sout _1 = 3decoder a5 a6 a7;  // 出力REGの選択 or 演算の選択 or 条件の選択
    // filter input
    ins0 ins1 ins2 ins3 ins4 ins5 ins6 ins7 = 8switch i0 i1 i2 i3 i4 i5 i6 i7 sin_t2;  // input valueをswitch inuptでフィルター
    // REGが書き込まれるのは
    // REG0 => t0,t2
    // REG3 => t1,t2
    // REG1245 => t2
    t0t2 = or t0 t2;
    t1t2 = or t1 t2;
    sor0t2 = and sor0 t2;
    sor1t2 = and sor1 t2;
    sor2t2 = and sor2 t2;
    sor3t2 = and sor3 t2;
    
    socr0 = or t0 sor0t2;   // t0 or (t2 and sor0)
    socr1 = and sor1 t2;    
    socr2 = and sor2 t2;
    socr3 = or t1 sor3t2;    // t1 or (t2 and sor3)
    socr4 = and sor4 t2;
    socr5 = and sor5 t2;
    // REGが読み出されるのは
    // REG03 => t2, t3
    // REG1 => t1, t2
    // REG245 => t2
    sir0t2 = and sir0 t2;
    sir1t2 = and sir1 t2;
    sir3t2 = and sir3 t2;

    sicr0 = or sir0t2 t3;   // t3 or (t2 and sir0)
    sicr1 = or t1 sir1t2;   // t1 or (t2 and sir1)
    sicr2 = and sir2 t2;
    sicr3 = or sir3t2 t3;   // t3 or (t2 and sir0)
    sicr4 = and sir4 t2;
    sicr5 = and sir5 t2;

    // 全てのメモリの読み出し/書き込みコード
    // r00 r01 r02 r03 r04 r05 r06 r07 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 socr0 sicr0;
    // r10 r11 r12 r13 r14 r15 r16 r17 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 socr1 sicr1;
    // r20 r21 r22 r23 r24 r25 r26 r27 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 socr2 sicr2;
    // r30 r31 r32 r33 r34 r35 r36 r37 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 socr3 sicr3;
    // r40 r41 r42 r43 r44 r45 r46 r47 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 socr4 sicr4;
    // r50 r51 r52 r53 r54 r55 r56 r57 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 socr5 sicr5;

    // 現在のREG内部を表示し続ける
    sr00 sr01 sr02 sr03 sr04 sr05 sr06 sr07 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 socr0 1;
    sr10 sr11 sr12 sr13 sr14 sr15 sr16 sr17 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 socr1 1;
    sr20 sr21 sr22 sr23 sr24 sr25 sr26 sr27 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 socr2 1;
    sr30 sr31 sr32 sr33 sr34 sr35 sr36 sr37 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 socr3 1;
    sr40 sr41 sr42 sr43 sr44 sr45 sr46 sr47 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 socr4 1;
    sr50 sr51 sr52 sr53 sr54 sr55 sr56 sr57 = mem8bits in0 in1 in2 in3 in4 in5 in6 in7 socr5 1;
    r00 r01 r02 r03 r04 r05 r06 r07 = 8switch sr00 sr01 sr02 sr03 sr04 sr05 sr06 sr07 sicr0;
    r10 r11 r12 r13 r14 r15 r16 r17 = 8switch sr10 sr11 sr12 sr13 sr14 sr15 sr16 sr17 sicr1;
    r20 r21 r22 r23 r24 r25 r26 r27 = 8switch sr20 sr21 sr22 sr23 sr24 sr25 sr26 sr27 sicr2;
    r30 r31 r32 r33 r34 r35 r36 r37 = 8switch sr30 sr31 sr32 sr33 sr34 sr35 sr36 sr37 sicr3;
    r40 r41 r42 r43 r44 r45 r46 r47 = 8switch sr40 sr41 sr42 sr43 sr44 sr45 sr46 sr47 sicr4;
    r50 r51 r52 r53 r54 r55 r56 r57 = 8switch sr50 sr51 sr52 sr53 sr54 sr55 sr56 sr57 sicr5;

    // value code
    in0 = 9bit_or r00 r10 r20 r30 r40 r50 ins0 sre0 imm0; // REGの読み出し or INPUT or ALU結果
    in1 = 9bit_or r01 r11 r21 r31 r41 r51 ins1 sre1 imm1;
    in2 = 9bit_or r02 r12 r22 r32 r42 r52 ins2 sre2 imm2;
    in3 = 9bit_or r03 r13 r23 r33 r43 r53 ins3 sre3 imm3;
    in4 = 9bit_or r04 r14 r24 r34 r44 r54 ins4 sre4 imm4;
    in5 = 9bit_or r05 r15 r25 r35 r45 r55 ins5 sre5 imm5;
    in6 = 9bit_or r06 r16 r26 r36 r46 r56 ins6 sre6   _2;
    in7 = 9bit_or r07 r17 r27 r37 r47 r57 ins7 sre7   _3;

    // t0の場合 REG0 = a@2:7
        imm0 imm1 imm2 imm3 imm4 imm5 _2 _3 = 8switch a2 a3 a4 a5 a6 a7 0 0 t0;
    // t1の場合 REG2 = REG0 {ope} REG1;
        // calc(命令はa5 a6 a7)
        re0 re1 re2 re3 re4 re5 re6 re7 = ALU a5 a6 a7 r00 r01 r02 r03 r04 r05 r06 r07 r10 r11 r12 r13 r14 r15 r16 r17;
        // !t1の場合は流さない
        sre0 sre1 sre2 sre3 sre4 sre5 sre6 sre7 = 8switch re0 re1 re2 re3 re4 re5 re6 re7 t1;
    // t2の場合 OUTPUT(a5 a6 a7) = INPUT(a2 a3 a4)
        sin_t2 = and sin t2;    // t2の時 & INPUT => INPUTを流す
        is_to_out = and sout t2;
        o0 o1 o2 o3 o4 o5 o6 o7 = 8switch in0 in1 in2 in3 in4 in5 in6 in7 is_to_out;
    // t3の場合 c@0:7 = if condition(REG3) REG0 swc
        cond = condition r30 r31 r32 r33 r34 r35 r36 r37 a5 a6 a7;
        c0 c1 c2 c3 c4 c5 c6 c7 = 8switch r00 r01 r02 r03 r04 r05 r06 r07 cond;
}

func 4bit_addr(a0 a1 a2 a3 b0 b1 b2 b3 c) -> (o0 o1 o2 o3 c3) {
    false = false a0;
    c0 o0 = fAddr a0 b0 c;
    c1 o1 = fAddr a1 b1 c0;
    c2 o2 = fAddr a2 b2 c1;
    c3 o3 = fAddr a3 b3 c2;
}

func BCD_addr(a0 a1 a2 a3 b0 b1 b2 b3 c) -> (o0 o1 o2 o3 carry) {
    false = false a0;
    o0 x1 x2 x3 c0 = 4bit_addr a0 a1 a2 a3 b0 b1 b2 b3 c;
    y0 = or x1 x2;
    y1 = and y0 x3;
    y2 = or c0 y1;
    // o0 o1 o2 o3 c1 = 4bit_addr x0 x1 x2 x3 
    //                         false y2 y2 false false;
    
    c1 o1 = hAddr x1 y2;
    c2 o2 = fAddr x2 y2 c1;
    c3 o3 = hAddr x3 c2;
    carry = or c0 c1;
}

// memo
// a(n+1)^2
// func 8bit_to_decimal(a0 a1 a2 a3 a4 a5 a6 a7) -> (0001x1 0001x2 0001x4 0001x8 0010x1 0010x2 0010x4 0010x8 0100x1 0100x2 0100x4 0100x8 1000) {
//     fa = false a0;
//     b0 b1 b2 b3 z0 = BCD_addr a0 a1 a2 a3 fa fa fa fa fa;
//     c0 c1 c2 c3 z1 = BCD_addr b0 b1 b2 b3 fa a4 a4 fa fa;
//     d0 d1 d2 d3 z2 = BCD_addr c0 c1 c2 c3 fa a5 fa fa fa;
//     e0 e1 e2 e3 z3 = BCD_addr d0 d1 d2 d3 fa fa a6 fa fa;
//     0001x1 0001x2 0001x4 0001x8 z4 = BCD_addr e0 e1 e2 e3 fa fa fa a7 fa;
    
//     f0 f1 f2 f3 z5 = BCD_addr z0 fa fa fa a4 fa fa fa z1;
//     g0 g1 g2 g3 z6 = BCD_addr f0 f1 f2 f3 a5 a5 fa fa z2;
//     h0 h1 h2 h3 z7 = BCD_addr g0 g1 g2 g3 fa a6 a6 fa z3;
//     0010x1 0010x2 0010x4 0010x8 z8 = BCD_addr h0 h1 h2 h3 fa a7 fa fa z4;

//     0100x1 0100x2 0100x4 0100x8 1000 = BCD_addr z7 fa fa fa a7 fa fa fa z8;
// }

func 8bit_to_decimal(1 2 4 8 16 32 64 128) -> (0001x1 0001x2 0001x4 0001x8 0010x1 0010x2 0010x4 0010x8 0100x1 0100x2 0100x4 0100x8 1000) {
    fa = false 1;
    b0 b1 b2 b3 z0 = BCD_addr 1 2 4 8 fa fa fa fa fa;
    c0 c1 c2 c3 z1 = BCD_addr b0 b1 b2 b3 fa 16 16 fa fa;
    d0 d1 d2 d3 z2 = BCD_addr c0 c1 c2 c3 fa 32 fa fa fa;
    e0 e1 e2 e3 z3 = BCD_addr d0 d1 d2 d3 fa fa 64 fa fa;
    0001x1 0001x2 0001x4 0001x8 z4 = BCD_addr e0 e1 e2 e3 fa fa fa 128 fa;
    
    f0 f1 f2 f3 z5 = BCD_addr z0 fa fa fa 16 fa fa fa z1;
    g0 g1 g2 g3 z6 = BCD_addr f0 f1 f2 f3 32 32 fa fa z2;
    h0 h1 h2 h3 z7 = BCD_addr g0 g1 g2 g3 fa 64 64 fa z3;
    0010x1 0010x2 0010x4 0010x8 z8 = BCD_addr h0 h1 h2 h3 fa 128 fa fa z4;

    0100x1 0100x2 0100x4 0100x8 1000 = BCD_addr z7 fa fa fa 128 fa fa fa z8;
}